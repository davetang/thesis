}
reverse(1234)
integer(10.2)
?interger
?integer
1234 / 10
as.integer(1234 / 10)
reverse <- function(x){
require(stringr)
l <- str_length(x);
for(i in 1:l){
r <- x %% 10;
print(r);
x <- as.integer(x/10)
}
}
reverse(1234)
reverse <- function(x){
require(stringr)
l <- str_length(x);
n <- vector();
for(i in 1:l){
r <- x %% 10;
print(r);
x <- as.integer(x/10)
n <- paste(n, r, sep='')
}
return(n)
}
reverse(1234)
reverse <- function(x){
require(stringr)
l <- str_length(x);
n <- vector();
for(i in 1:l){
r <- x %% 10;
x <- as.integer(x/10)
n <- paste(n, r, sep='')
}
return(as.integer(n))
}
reverse(1234)
reverse(39483)
q()
q()
?exp
exp(2)
exp(1)
q()
39708/(39708+63093)
q()
2.5^2
60.59/sqrt(6)
population <- rnorm(n = 100000, mean = 300, sd = 50)
sample(x = population, size = 6, replace = FALSE)
mylist <- list() #create an empty list
for (i in 1:5) {
vec <- numeric(5) #preallocate a numeric vector
for (j in 1:5) { #fill the vector
vec[j] <- i^j
}
mylist[[i]] <- vec #put all vectors in the list
}
df <- do.call("rbind",mylist) #combine all vectors into a matrix
df
class(df)
vec <- numeric(5)
vec
q()
1/0.00001
1/0.000000001
head(iris)
head(cars)
table(cars$speed < 5)
table(cars$speed >6)
table(cars$speed, cars$dist)
datasets()
data
data()
head(ChickWeight)
table(ChickWeight$Time, ChickWeight$Diet)
table(ChickWeight$Chick)
mosiacplot(table(ChickWeight$Time, ChickWeight$Diet))
mosaicplot(table(ChickWeight$Time, ChickWeight$Diet))
q()
??modulus
2 %% 5
2/5
q()
library(slidify)
library(FANTOM3and4CAGE)
?FANTOM3and4CAGE
??FANTOM3and4CAGE
browseVignettes(FANTOM3and4CAGE)
data(FANTOMtissueCAGEhuman)
names(FANTOMtissueCAGEhuman)
lung_group <- FANTOMtissueCAGEhuman[["lung"]]
class(lung_group)
head(lung_group)
dim(lung_group)
source("http://bioconductor.org/biocLite.R")
biocLite()
q()
y1 <- c(18.2, 20.1, 17.6, 16.8, 18.8, 19.7, 19.1)
y2 <- c(17.4, 18.7, 19.1, 16.4, 15.9, 18.4, 17.7)
y3 <- c(15.2, 18.8, 17.7, 16.5, 15.9, 17.1, 16.7)
y <- (y1, y2, y3)
group <- factor(rep(1:3, rep(7,3)))
y
y3
y1 <- c(18.2, 20.1, 17.6, 16.8, 18.8, 19.7, 19.1)
y2 <- c(17.4, 18.7, 19.1, 16.4, 15.9, 18.4, 17.7)
y3 <- c(15.2, 18.8, 17.7, 16.5, 15.9, 17.1, 16.7)
y <- c(y1, y2, y3)
group <- factor(rep(1:3, rep(7,3)))
group
data <- data.frame(y = y, group = group)
fit <- lm (y ~ group, data)
anova(fit)
scores <- c(25, 29, 14, 11, 11, 6, 22, 18, 17, 20, 5, 2)
school <- factor(c("A", "A", "A", "A", "B", "B", "B", "B", "C", "C", "C", "C"))
teacher <- factor(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6))
teacher2 <- factor(c(1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2))  # This is the way the data is coded for problems in the book
boxplot(scores ~ school)
boxplot(scores ~ teacher)
boxplot(scores ~ school:teacher2)
c('1.119','1.2996','1.5407','1.5084','1.6181','1.5962','1.2617','1.2288','1.3471','1.0206')
c('1.045','1.1418','1.2569','0.6191','1.4823','0.8991','0.8365','1.2898','1.1821','0.9177')
c('0.9873','0.9873','0.8714','0.9452','1.1186','1.2909','1.1502','1.1635','1.151','0.9367')
c('1.3883','1.104','1.1581','1.319','1.1803','0.8738','1.387','1.301','1.3925','1.0832')
c('1.3952','0.9714','1.3972','1.5369','1.3727','1.2909','1.1874','1.1374','1.0647','0.9486')
c('1.2574','1.0295','1.1941','1.0759','1.3249','0.9494','1.1041','1.1575','1.294','1.4543')
a <- c('1.119','1.2996','1.5407','1.5084','1.6181','1.5962','1.2617','1.2288','1.3471','1.0206')
b <- c('1.045','1.1418','1.2569','0.6191','1.4823','0.8991','0.8365','1.2898','1.1821','0.9177')
c <- c('0.9873','0.9873','0.8714','0.9452','1.1186','1.2909','1.1502','1.1635','1.151','0.9367')
d <- c('1.3883','1.104','1.1581','1.319','1.1803','0.8738','1.387','1.301','1.3925','1.0832')
e <- c('1.3952','0.9714','1.3972','1.5369','1.3727','1.2909','1.1874','1.1374','1.0647','0.9486')
f <- c('1.2574','1.0295','1.1941','1.0759','1.3249','0.9494','1.1041','1.1575','1.294','1.4543')
a
b
data
group <- factor(rep(1:3, rep(7,3)))
group
rep(7,3)
group <- factor(rep(1:6, rep(10,6))
)
group
data <- data.frame(x = all, group = group)
a <- c('1.119','1.2996','1.5407','1.5084','1.6181','1.5962','1.2617','1.2288','1.3471','1.0206')
b <- c('1.045','1.1418','1.2569','0.6191','1.4823','0.8991','0.8365','1.2898','1.1821','0.9177')
c <- c('0.9873','0.9873','0.8714','0.9452','1.1186','1.2909','1.1502','1.1635','1.151','0.9367')
d <- c('1.3883','1.104','1.1581','1.319','1.1803','0.8738','1.387','1.301','1.3925','1.0832')
e <- c('1.3952','0.9714','1.3972','1.5369','1.3727','1.2909','1.1874','1.1374','1.0647','0.9486')
f <- c('1.2574','1.0295','1.1941','1.0759','1.3249','0.9494','1.1041','1.1575','1.294','1.4543')
all <- c(a, b, c, d, e, f)
group <- factor(rep(1:6, rep(10,6)))
data <- data.frame(x = all, group = group)
data
rat <- factor(rep(c('a','b','c','d','e','f'), rep(10,6)))
rat
data.frame(all=all, rat=rat)
tech <- factor(rep(c('Brad','Janet'), c(30,30)))
tech
df <- data.frame(uptake=all, rat=rat, tech=tech)
df
boxplot(rat ~ tech, data = df)
head(df)
boxplot(uptake ~ rat, data = df)
class(df$uptake)
a <- c(1.119,1.2996,1.5407,1.5084,1.6181,1.5962,1.2617,1.2288,1.3471,1.0206)
b <- c(1.045,1.1418,1.2569,0.6191,1.4823,0.8991,0.8365,1.2898,1.1821,0.9177)
c <- c(0.9873,0.9873,0.8714,0.9452,1.1186,1.2909,1.1502,1.1635,1.151,0.9367)
d <- c(1.3883,1.104,1.1581,1.319,1.1803,0.8738,1.387,1.301,1.3925,1.0832)
e <- c(1.3952,0.9714,1.3972,1.5369,1.3727,1.2909,1.1874,1.1374,1.0647,0.9486)
f <- c(1.2574,1.0295,1.1941,1.0759,1.3249,0.9494,1.1041,1.1575,1.294,1.4543)
all <- c(a, b, c, d, e, f)
rat <- factor(rep(c('a','b','c','d','e','f'), rep(10,6)))
tech <- factor(rep(c('Brad','Janet'), c(30,30)))
df <- data.frame(uptake=all, rat=rat, tech=tech)
class(df$uptake)
boxplot(uptake ~ rat, data = df)
boxplot(uptake ~ tech, data = df)
my_aov <- aov(uptake ~ rat + tech, data=df)
summary(my_aov)
?aov
summary(aov(uptake ~ rat/tech, data=df))
summary(aov(uptake ~ tech + rat %in% tech, data=df))
q()
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="min")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
?rank
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="average")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
df <- as.data.frame(matrix(data = c(2,4,4,5,5,14,4,7,4,8,6,9,3,8,5,8,3,9,3,5), nrow = 5, byrow = TRUE))
quantile_normalisation(df)
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="max")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
quantile_normalisation(df)
library(preprocessCore)
source('http://bioconductor.org/biocLite.R')
biocLite('preprocessCore')
library(preprocessCore)
normalize.quantiles(df)
normalize.quantiles(as.matrix(df))
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="first")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
quantile_normalisation(df)
q()
q()
?polygon
q()
q()
library(twitteR)
list.files()
load("twitter_authentication.Rdata")
registerTwitterOAuth(cred)
me <- getUser("davetang31")
me <- searchTwitter("@davetang31", n=30, since="2012-11-11")
me
cor(c(1,1,1,0,0,0,0,0,0,0), c(1,1,1,0,0,0,0,0,0,0))
cor(c(1,1,1,0,0,0,0,0,0,0), c(1,1,1,0,0,0,0,0,0,0), method="spearman")
q()
load("twitter_authentication.Rdata")
registerTwitterOAuth(cred)
library("twitteR")
registerTwitterOAuth(cred)
library(RISmed)
summary <- EUtilsSummary('transcriptome', type='esearch', db='pubmed', reldate=1)
QueryCount(summary)
QueryId(summary)
result <- EUtilsGet(summary)
ArticleTitle(result)[19]
q()
setwd("/Users/davetang/github/fantom5_repeat/srna_cage/")
dist <- scan("dist.txt")
random_dist <- scan("random_dist.txt")
hist(log10(dist), freq = FALSE, breaks=50)
hist(log10(random_dist), freq=FALSE, breaks=50)
plot(density(log10(cage$V5)),
xlab="Tag cluster expression (log10)",
main="Density of CAGE expression")
hist(log10(dist), freq = FALSE, breaks=50)
hist(log10(dist), freq = FALSE, breaks=40)
hist(log10(random_dist), freq=FALSE, breaks=40)
hist(log10(dist), freq = FALSE, breaks=40)
hist(log10(random_dist), freq=FALSE, breaks=40)
hist(log10(random_dist), freq=FALSE, breaks=40, xlim=c(0,8))
hist(log10(dist), freq = FALSE, breaks=40)
hist(log10(dist), freq = FALSE, breaks=40, xlim=c(0,8))
hist(log10(random_dist), freq=FALSE, breaks=40, xlim=c(0,8))
hist(log10(dist), freq = FALSE, breaks=40, xlim=c(0,8))
hist(log10(random_dist), freq=FALSE, breaks=40, xlim=c(0,8))
par(mfrow = c(2,1))
hist(log10(dist), freq = FALSE, breaks=40, xlim=c(0,8))
hist(log10(random_dist), freq=FALSE, breaks=40, xlim=c(0,8))
plot(density(log10(dist)))
plot(density(log10(random_dist)))
table(random_dist>0)
random_dist[random_dist>0)]
random_dist[random_dist>0]
plot(density(log10(random_dist[random_dist>0])))
plot(density(log10(dist)), xlim=c(0,8))
plot(density(log10(random_dist[random_dist>0])), xlim=c(0,8))
setwd("~")
my_cor <- read.table("correlation.tsv", header=F)
dim(my_cor)
plot(density(my_cor$V3))
par(mfrow=c(1,1))
plot(density(my_cor$V3))
abline(v=0)
q()
library("devtools")
library(roxygen2)
library(bedr)
bedr::bed_to_granges
q()
library(CAGEr)
?plotInterquantileWidth
plotInterquantileWidth
?plotInterquantileWidth
?hist
?plotInterquantileWidth
q()
library(Gviz)
data(twoGroups)
class(twoGroups)
head(twoGroups)
dTrack <- DataTrack(twoGroups, name="uniform")
plotTracks(dTrack)
plotTracks(dTrack, type='h')
plotTracks(dTrack, type='gh')
plotTracks(dTrack, type='g')
plotTracks(dTrack, type='heatmap')
plotTracks(dTrack, type='h')
plotTracks(dTrack, type='l')
plotTracks(dTrack, type='b')
plotTracks(dTrack, type='s')
plotTracks(dTrack, type='boxplot')
plotTracks(dTrack, type='histogram')
plotTracks(dTrack, type='horizon')
plotTracks(dTrack, type=c('horizon','g'))
plotTracks(dTrack, type = c("boxplot", "a", "g"))
data(dtHoriz)
head(dtHoriz)
dtHoriz
pi
library(Gviz)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
q()
phylo <- c("hg19", "panTro4", "gorGor3", "ponAbe2", "nomLeu3", "rheMac3", "macFas5", "papHam1", "chlSab1", "calJac3", "saiBol1", "otoGar3", "tupChi1", "speTri2", "jacJac1", "micOch1", "criGri1", "mesAur1", "mm10", "rn5", "hetGla2", "cavPor3", "chiLan1", "octDeg1", "oryCun2", "ochPri3", "susScr3", "vicPac2", "camFer1", "turTru2", "orcOrc1", "panHod1", "bosTau7", "oviAri3", "capHir1", "equCab2", "cerSim1", "felCat5", "canFam3", "musFur1", "ailMel1", "odoRosDiv1", "lepWed1", "pteAle1", "pteVam1", "myoDav1", "myoLuc2", "eptFus1", "eriEur2", "sorAra2", "conCri1", "loxAfr3", "eleEdw1", "triMan1", "chrAsi1", "echTel2", "oryAfe1", "dasNov3", "monDom5", "sarHar1", "macEug2", "ornAna1", "falChe1", "falPer1", "ficAlb2", "zonAlb1", "geoFor1", "taeGut2", "pseHum1", "melUnd1", "amaVit1", "araMac1", "colLiv1", "anaPla1", "galGal4", "melGal1", "allMis1", "cheMyd1", "chrPic1", "pelSin1", "apaSpi1", "anoCar2", "xenTro7", "latCha1", "tetNig2", "fr3", "takFla1", "oreNil2", "neoBri1", "hapBur1", "mayZeb1", "punNye1", "oryLat2", "xipMac1", "gasAcu1", "gadMor1", "danRer7", "astMex1", "lepOcu1", "petMar2")
length(phylo)
phylo <- gsub(pattern = "[0-9]+",replacement = '',perl = T,x = phylo)
length(phylo)
library("BSgenome.Hsapiens.UCSC.hg19")
setwd("/Users/davetang/github/thesis/cover/")
library(Gviz)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(bedr)
library(BSgenome.Hsapiens.UCSC.hg19)
gen <- 'hg19'
chr <- 'chr22'
#genome axis track, as the function suggests
gtrack <- GenomeAxisTrack()
#ideogram track, requires Internet connection
itrack <- IdeogramTrack(genome = gen, chromosome = chr)
#TxDb object
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
#sequence track
sTrack <- SequenceTrack(Hsapiens)
#gene track
grtrack <- GeneRegionTrack(txdb,
genome = gen,
chromosome = chr,
fill='black',
transcriptAnnotation = "symbol",
name = "UCSC known genes")
#raw ChIP-Seq data for RNA pol II
raw_1 <-  DataTrack(range = 'wgEncodeHaibTfbsH1hescPol2V0416102RawRep1.bigWig',
genome = gen,
type = "l",
chromosome = chr,
name = "ChIP-Seq",
col="#34D13F")
#peaks from ChIP-Seq data
peak_1 <- AnnotationTrack(range = bed_to_granges('wgEncodeHaibTfbsH1hescPol2V0416102PkRep1.broadPeak.gz'),
genome = gen,
name = 'ChIP-Seq',
chromosome = chr,
fill='#34D13F')
#replicate raw ChIP-Seq data for RNA pol II
raw_2 <- DataTrack(range = 'wgEncodeHaibTfbsH1hescPol2V0416102RawRep2.bigWig',
genome = gen,
type = "l",
chromosome = chr,
name = "bigWig",
col="#DE2840")
#replicate peaks from ChIP-Seq data
peak_2 <- AnnotationTrack(range = bed_to_granges('wgEncodeHaibTfbsH1hescPol2V0416102PkRep2.broadPeak.gz'),
genome = gen,
name = 'Peaks',
chromosome = chr,
fill="#DE2840")
#DNase I hypersensitive tracks
dnase_1 <- AnnotationTrack(range = bed_to_granges('wgEncodeUwDnaseH1hescPkRep1.narrowPeak.gz'),
genome = gen,
name = 'DNase I',
chromosome = chr,
fill='#273BA3')
dnase_2 <- AnnotationTrack(range = bed_to_granges('wgEncodeOpenChromDnaseH1hescPk.narrowPeak.gz'),
genome = gen,
name = 'DNase I',
chromosome = chr,
fill = '#273BA3')
#conservation tracks
phylop <- DataTrack(range = 'chr22.phyloP46way.wig.gz',
genome = gen,
chromosome = 'chr22',
name = "PhyloP",
type="horizon"
)
phastcons <- DataTrack(range = 'chr22.phastCons46way.wig.gz',
genome = gen,
chromosome = 'chr22',
name = "phastCons",
type="horizon"
)
my_bam_file <- c('wgEncodeRikenCageH1hescCellPapAlnRep1.bam',
'wgEncodeRikenCageH1hescCellPapAlnRep2.bam')
my_bam_size <- vector()
#this only works for samtools r595 or later
#RStudio couldn't read my $PATH
for (i in 1:length(my_bam_file)){
my_command <- paste("~/bin/samtools idxstats",
my_bam_file[1],
"| awk '{s+=$3} END {print s}'")
n <- system(my_command, intern = T)
my_bam_size[i] <- n
}
#CAGE tracks as a DataTrack
cage_1 <- DataTrack(range = my_bam_file[1],
genome = gen,
type = "l",
name = "CAGE",
window = -1,
chromosome = chr,
ylim=c(0,60),
transformation=function(x){ x <- (x * 1000000)/as.numeric(my_bam_size[1])})
cage_2 <- DataTrack(range = my_bam_file[2],
genome = gen,
type = "l",
name = "CAGE",
window = -1,
chromosome = chr,
ylim=c(0,60),
transformation=function(x){ x <- (x * 1000000)/as.numeric(my_bam_size[2])})
#CAGE tracks as AlignmentsTrack
cage_aln_1 <- AlignmentsTrack(range = 'wgEncodeRikenCageH1hescCellPapAlnRep1.bam',
name = 'CAGE reads')
cage_aln_2 <- AlignmentsTrack(range = 'wgEncodeRikenCageH1hescCellPapAlnRep2.bam',
name = 'CAGE reads')
#chr22:29166375-29200166
from <- 29186375
to <- 29200166
#overlay ChIP-Seq raw tracks
chip_overlay <- OverlayTrack(trackList = list(raw_1, raw_2))
ht1 <- HighlightTrack(trackList=list(gtrack, grtrack, cage_1, cage_2, chip_overlay, peak_1, peak_2, dnase_1, dnase_2, phylop, phastcons),
start = c(29196100), width = 650,
chromosome = chr)
plotTracks(list(itrack, ht1), from = from, to = to)
from <- 29196200
to   <- 29196950
ht2 <- HighlightTrack(trackList=list(gtrack, grtrack, gtrack, grtrack, cage_aln_1, cage_aln_2),
start = c(29196470), width = 110,
chromosome = chr)
plotTracks(list(itrack, ht2, chip_overlay, peak_1, peak_2, dnase_1, dnase_2, phylop, phastcons),
from = from, to = to)
from <- 29196470
to   <- 29196580
plotTracks(list(itrack, gtrack, sTrack, grtrack, cage_aln_1, cage_aln_2),
from = from, to = to)
?SequenceTrack
sTrack <- SequenceTrack(Hsapiens, chromosome = chr)
from <- 29196470
to   <- 29196580
plotTracks(list(itrack, gtrack, sTrack, grtrack, cage_aln_1, cage_aln_2),
from = from, to = to)
sTrack <- SequenceTrack(Hsapiens, chromosome = chr, cex=0.5)
plotTracks(list(itrack, gtrack, sTrack, grtrack, cage_aln_1, cage_aln_2),
from = from, to = to)
from <- 29196470
to   <- 29196570
plotTracks(list(itrack, gtrack, sTrack, grtrack, cage_aln_1, cage_aln_2),
from = from, to = to)
from <- 29196480
to   <- 29196570
plotTracks(list(itrack, gtrack, sTrack, grtrack, cage_aln_1, cage_aln_2),
from = from, to = to)
from <- 29196200
to   <- 29196950
ht2 <- HighlightTrack(trackList=list(gtrack, grtrack, gtrack, grtrack, cage_aln_1, cage_aln_2),
start = c(29196480), width = 90,
chromosome = chr)
plotTracks(list(itrack, ht2, chip_overlay, peak_1, peak_2, dnase_1, dnase_2, phylop, phastcons),
from = from, to = to)
from <- 29196480
to   <- 29196570
plotTracks(list(itrack, gtrack, sTrack, grtrack, cage_aln_1, cage_aln_2),
from = from, to = to)
from <- 29186375
to <- 29200166
#overlay ChIP-Seq raw tracks
chip_overlay <- OverlayTrack(trackList = list(raw_1, raw_2))
ht1 <- HighlightTrack(trackList=list(gtrack, grtrack, cage_1, cage_2, chip_overlay, peak_1, peak_2, dnase_1, dnase_2, phylop, phastcons),
start = c(29196100), width = 650,
chromosome = chr)
plotTracks(list(itrack, ht1), from = from, to = to)
